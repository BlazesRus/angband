<div id="wikinav"><div class="highlight_box"> Navigation:<br /><a href="http://rephial.org/wiki/Home">Home</a><br /><a href="http://rephial.org/wiki/IndexPage">IndexPage</a><br /></div><div class="highlight_box"> This page:<br /><a href="http://rephial.org/wiki/xref/PerfectAutosave">Links to here</a><br />Last modified:<br />2010-06-11 at 14:47<br /></div></div>

<div id="wikihead"><h2>PerfectAutosave</h2></div>

<div id="wikicontent"><div class="page"><h4 id="s2_1">Goals</h4><ul><li>Safe: it should not be possible to destroy a game by crashing during a save.<li>Effective: Lost progress should be bounded.<li>Non-cheatable: Adding kill -9 as a move should not change the game.<li>Efficient: subjective, of course :)</ul><h4 id="s2_2">Note</h4><p>I (Pete Mack) independently wrote a partial implementation of this, for replaying movies. It starts out with a checkpoint: a save file, screen size, and complete option dump (including macros and keymaps.) Then it logs keystrokes from there. To replay: open the save file, and watch the movie. For a guaranteed autosave, it would be necessary to include an option to restart playing after reading the log. However, any such logging is easily hacked for save-file abuse. (Just hack the source and allow replay to position n-1.) It does log (and flush) every keystroke prior to executing any commands, so a full replay is guaranteed to die.<p>Note that this was not designed as an autosave feature, so some modification would be necessary.<h4 id="s2_3">Implementation</h4><ul><li><p>Saving is done by writing a 1000new.sorear file, and atomic-renaming it.<ul><li>On systems where the first rename fails, 1000 will be renamed to 1000old, then 1000new to 1000, and 1000old deleted. Possibly less safe?</ul><li><p>Between saves, incoming events are appended to the save file.<li><p>The interesting bits come at the interaction between them<li><p>To always restore at a sane point, only save before prompting for a command<li><p>After certain types of mode shift, humans need 0.7s, if we do it then it&#39;ll be unnoticable<ul><li>After level changes, when 8000 characters are in the journal<li>During level changes might be interesting on slow systems<li>Don&#39;t store level data, generate before replay</ul><li><p>When we load, replay all stored characters<ul><li>Ignore save&amp;quit commands during replay<li>Will require respawn support - if you die and lose power, replaying the journal will kill the character but we want a birth screen<li>Note that if Angband segfaults, there is a good chance it will do so again on replay - nice for debugging<li>Not so nice for playing, add -flush-journal (which IS cheating misused)</ul></ul></div></div>

